{
	"info": {
		"_postman_id": "6f1583a4-145f-439c-83ce-25027e9f3562",
		"name": "Api_OSB_Consolidada[CO]-Comparador_Aut",
		"description": "\\[CL\\] Api Consolidada - Resumen de Productos Clientes Obtener\n\nDocument Version: 2.0\n\nParámetros de consulta:\n\n1.  Productos por Rut: ALL\n2.  Cuenta: corriente, ahorro, vista: ACCOUNTS\n3.  Tarjeta de Crédito SAT: CREDIT-CARDS\n4.  Tarjeta de Crédito SATIF: CREDIT-CARDS\n5.  Línea Crédito: ALL\n6.  Crédito Consumo, Estudiantil, Automotriz: PERSONAL-LOANS\n7.  Crédito Hipotecario: MORTAGE-LOANS\n8.  Depósito a plazo: INVESTMENTS\n    \n\nTeam: Apificación \\[QA\\]\n\nContact Support: Email: [pjreyesg@Falabella.cl](mailto:pjreyesg@Falabella.cl)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18944700"
	},
	"item": [
		{
			"name": "OSB_resumenProductoObtener",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function () { }, [3000])\r",
							"\r",
							"//reset var\r",
							"\r",
							"pm.collectionVariables.set('compare_osb_cuenta_corriente', '')\r",
							"pm.collectionVariables.set('compare_osb_cuenta_ahorro', '')\r",
							"pm.collectionVariables.set('compare_osb_creditoConsumo', '')\r",
							"pm.collectionVariables.set('compare_osb_tc', '')\r",
							"pm.collectionVariables.set('compare_osb_inversion', '')\r",
							"//pm.variables.set(\"c_username\", \"16459620\")\r",
							"var c_username = pm.iterationData.get(\"c_username\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fecha ejecución request\r",
							"var c_date_iso\r",
							"var date = new Date();\r",
							"var c_date_iso = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(0, 19) + 'Z';\r",
							"console.log(\"fecha: \", c_date_iso);\r",
							"pm.variables.set(\"c_date_iso\", c_date_iso)\r",
							"\r",
							"var fechaEjecucion = c_date_iso\r",
							"pm.test(\"Fecha de Ejecución: \" + fechaEjecucion)\r",
							"\r",
							"//****************** xml  *************/\r",
							"\r",
							"var response = pm.response.text();\r",
							"var responseBody = response.substr(response.indexOf('<resp:'));\r",
							"var response = xml2Json(responseBody);\r",
							"\r",
							"const response_body_osb = response;\r",
							"console.log(\"response_body_osb \", response_body_osb)\r",
							"pm.environment.set(\"response_body_osb\", JSON.stringify(response_body_osb))\r",
							"\r",
							"/*pm.test(\"Código Operacion: 00\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"   var codigoOperacion_esperado = \"00\"\r",
							"    var codigoOperacion = response['resp:clienteResumenProductosObtenerExpResp']['estadoOperacion']\r",
							"    console.log(\"codigoOperacion\", codigoOperacion_esperado);\r",
							"    pm.expect(codigoOperacion_esperado).is.to.eql(codigoOperacion['codigoOperacion']);\r",
							"});\r",
							"*/\r",
							"\r",
							"pm.test(\"Glosa: Operacion Exitosa\", function () {\r",
							"    var glosaOperacion = response['resp:clienteResumenProductosObtenerExpResp']['estadoOperacion']['codigoOperacion']\r",
							"    pm.expect(glosaOperacion).to.eql(\"00\");\r",
							"    console.log(\"aqui \",glosaOperacion)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"try {\r",
							"    var compare_osb_cuenta_corriente = response['resp:clienteResumenProductosObtenerExpResp']['cuenta']['cuentaCorriente']\r",
							"} catch (error) {\r",
							"    console.log(\"error cuenta\", error);\r",
							"}\r",
							"var i = 0;\r",
							"\r",
							"\r",
							"//cuenta corriente    \r",
							"if (compare_osb_cuenta_corriente != undefined) {\r",
							"\r",
							"    if (compare_osb_cuenta_corriente.length == undefined) {\r",
							"        pm.test(\"Cuenta Corriente - informada\", function () {\r",
							"            console.log(\"NORMAL 2\", compare_osb_cuenta_corriente);\r",
							"            var compare_osb_cuenta_corriente_2 = response[\"resp:clienteResumenProductosObtenerExpResp\"][\"cuenta\"][\"cuentaCorriente\"]\r",
							"            pm.collectionVariables.set(\"compare_osb_cuenta_corriente\", compare_osb_cuenta_corriente)\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        for (let i = 0; i < compare_osb_cuenta_corriente.length; i++) {\r",
							"            pm.test('Cuenta Corriente ' + (i + 1) + ' - Informada ', function () {\r",
							"                var compare_osb_cuenta_corriente = response[\"resp:clienteResumenProductosObtenerExpResp\"][\"cuenta\"][\"cuentaCorriente\"]\r",
							"                pm.collectionVariables.set(\"compare_osb_cuenta_corriente\", compare_osb_cuenta_corriente)\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"//cuenta ahorro\r",
							"  \r",
							"try {\r",
							"    var compare_osb_cuenta_ahorro = response['resp:clienteResumenProductosObtenerExpResp']['cuenta']['cuentaAhorro']\r",
							"} catch (error) {\r",
							"    console.log(\"error cuenta\", error);\r",
							"}\r",
							"var i = 0;\r",
							"\r",
							"if (compare_osb_cuenta_ahorro != undefined) {\r",
							"\r",
							"    if (compare_osb_cuenta_ahorro.length == undefined) {\r",
							"        pm.test(\"Cuenta Ahorro - informada\", function () {\r",
							"            console.log(\"cuenta ahorro\", compare_osb_cuenta_ahorro);\r",
							"            var compare_osb_cuenta_ahorro = response[\"resp:clienteResumenProductosObtenerExpResp\"][\"cuenta\"][\"cuentaAhorro\"]\r",
							"            pm.collectionVariables.set(\"compare_osb_cuenta_ahorro\", compare_osb_cuenta_ahorro)\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        for (let i = 0; i < compare_osb_cuenta_ahorro.length; i++) {\r",
							"            pm.test('Cuenta Ahorro ' + (i + 1) + ' - Informada ', function () {\r",
							"                var compare_osb_cuenta_ahorro = response[\"resp:clienteResumenProductosObtenerExpResp\"][\"cuenta\"][\"cuentaAhorro\"]\r",
							"                pm.collectionVariables.set(\"compare_osb_cuenta_ahorro\", compare_osb_cuenta_ahorro)\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"//crédito de consumo\r",
							"  \r",
							"try {\r",
							"    var compare_osb_creditoConsumo = response['resp:clienteResumenProductosObtenerExpResp']['credito']['creditoConsumo']\r",
							"} catch (error) {\r",
							"    console.log(\"error credito\", error);\r",
							"}\r",
							"var i = 0;\r",
							"\r",
							"if (compare_osb_creditoConsumo != undefined) {\r",
							"\r",
							"    if (compare_osb_creditoConsumo.length == undefined) {\r",
							"        pm.test(\"Crédito de Consumo  - informado\", function () {\r",
							"            console.log(\"Crédito de Consumo\", compare_osb_creditoConsumo);\r",
							"            var compare_osb_creditoConsumo = response[\"resp:clienteResumenProductosObtenerExpResp\"]['credito']['creditoConsumo']\r",
							"            pm.collectionVariables.set(\"compare_osb_creditoConsumo\", compare_osb_creditoConsumo)\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        for (let i = 0; i < compare_osb_creditoConsumo.length; i++) {\r",
							"            pm.test('Crédito de Consumo  ' + (i + 1) + ' - Informado ', function () {\r",
							"                var compare_osb_creditoConsumo = response[\"resp:clienteResumenProductosObtenerExpResp\"]['credito']['creditoConsumo']\r",
							"                pm.collectionVariables.set(\"compare_osb_creditoConsumo\", compare_osb_creditoConsumo)\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"  \r",
							"\r",
							"//Tarjeta Credito \r",
							"\r",
							"try {\r",
							"    var compare_osb_tc = response['resp:clienteResumenProductosObtenerExpResp']['tarjetaCredito']\r",
							"} catch (error) {\r",
							"    console.log(\"error tc\", error);\r",
							"}\r",
							"var i = 0;\r",
							"\r",
							"if (compare_osb_tc != undefined) {\r",
							"\r",
							"    if (compare_osb_tc.length == undefined) {\r",
							"        pm.test(\"Tarjeta de Crédito - Informada\", function () {\r",
							"            console.log(\"NORMAL 2\", compare_osb_tc);\r",
							"            var compare_osb_tc = response['resp:clienteResumenProductosObtenerExpResp']['tarjetaCredito']\r",
							"            pm.collectionVariables.set(\"compare_osb_tc\", compare_osb_tc)\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        for (let i = 0; i < compare_osb_tc.length; i++) {\r",
							"            pm.test('Tarjeta de Crédito ' + (i + 1) + ' - Informada ', function () {\r",
							"                var compare_osb_tc = response['resp:clienteResumenProductosObtenerExpResp']['tarjetaCredito']\r",
							"                pm.collectionVariables.set(\"compare_osb_tc\", compare_osb_tc)\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"//DAP\r",
							"try {\r",
							"    var compare_osb_inversion = response['resp:clienteResumenProductosObtenerExpResp']['inversion']['depositoPlazo']\r",
							"} catch (error) {\r",
							"    console.log(\"error inversion\", error);\r",
							"}\r",
							"var i = 0;\r",
							"\r",
							"if (compare_osb_inversion != undefined) {\r",
							"\r",
							"    if (compare_osb_inversion.length == undefined) {\r",
							"        pm.test(\"Inversión  - Informada\", function () {\r",
							"            console.log(\"Inversión\", compare_osb_inversion);\r",
							"            var compare_osb_inversion = response[\"resp:clienteResumenProductosObtenerExpResp\"]['inversion']['depositoPlazo']\r",
							"            pm.collectionVariables.set(\"compare_osb_inversion\", compare_osb_inversion)\r",
							"        });\r",
							"    }\r",
							"    else {\r",
							"        for (let i = 0; i < compare_osb_inversion.length; i++) {\r",
							"            pm.test('Inversión  ' + (i + 1) + ' - Informada ', function () {\r",
							"                var compare_osb_inversion = response[\"resp:clienteResumenProductosObtenerExpResp\"]['inversion']['depositoPlazo']\r",
							"                pm.collectionVariables.set(\"compare_osb_inversion\", compare_osb_inversion)\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{c_accesstoken_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Channel",
						"value": "Web",
						"type": "text"
					},
					{
						"key": "X-Transaction-Type",
						"value": "PASSWORD",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-Country",
						"value": "CL",
						"type": "text"
					},
					{
						"key": "X-Commerce",
						"value": "Banco",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "text/xml; charset=utf-8",
						"type": "text"
					},
					{
						"key": "SOAPAction",
						"value": "http://middlewareuat.falabella.cl/bco/cl/12c/producer/FABAN/LineaCredito/PACDetalle/Obtener/v1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <soap:Header>\r\n        <ns1:ClientService xmlns:ns1=\"http://mdwcorp.falabella.com/common/schema/clientservice\">\r\n            <ns1:country>CO</ns1:country>\r\n            <ns1:commerce>Banco</ns1:commerce>\r\n            <ns1:channel>Web</ns1:channel>\r\n        </ns1:ClientService>\r\n        <ns1:ClientServiceFIF xmlns:ns1=\"http://mdwcorp.falabella.com/common/schema/clientserviceFIF\">\r\n        </ns1:ClientServiceFIF>\r\n    </soap:Header>\r\n    <soap:Body>\r\n        <ns1:clienteResumenProductosObtenerExpReq xmlns:ns1=\"http://mdwcorp.falabella.com/OSB/schema/FIF/CORP/cliente/resumenProductos/obtener/Req-v2015.05\">\r\n            <documentoIdentidad>\r\n                <tipoDocumento>{{c_Document_Id}}</tipoDocumento>\r\n                <numeroDocumento>{{c_username}}</numeroDocumento>\r\n            </documentoIdentidad>\r\n            \r\n            <situacion>\r\n                <estado>00</estado>\r\n            </situacion>\r\n            <situacion>\r\n                <estado>01</estado>\r\n            </situacion>\r\n            \r\n            <situacion>\r\n                <estado>02</estado>\r\n            </situacion>\r\n            \r\n            <situacion>\r\n                <estado>03</estado>\r\n            </situacion>\r\n             <situacion>\r\n                <estado>04</estado>\r\n             </situacion>\r\n             \r\n        </ns1:clienteResumenProductosObtenerExpReq>\r\n    </soap:Body>\r\n</soap:Envelope>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "http://middlewareuat.falabella.cl/bco/co/12c/bus/CORP/cliente/v1_1/resumenProductosObtener",
					"protocol": "http",
					"host": [
						"middlewareuat",
						"falabella",
						"cl"
					],
					"path": [
						"bco",
						"co",
						"12c",
						"bus",
						"CORP",
						"cliente",
						"v1_1",
						"resumenProductosObtener"
					]
				}
			},
			"response": []
		},
		{
			"name": "API Consolidada",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//en test - Recuperar la variable y evaluarla\r",
							"//eval(pm.collectionVariables.get(\"c_response_consolidada_02\"))();\r",
							"\r",
							"\r",
							"var c_date_iso\r",
							"var date = new Date();\r",
							"var c_date_iso = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(0, 19) + 'Z';\r",
							"console.log(\"fecha: \", c_date_iso);\r",
							"pm.collectionVariables.set(\"c_date_iso\", c_date_iso)\r",
							"\r",
							"var fechaEjecucion = c_date_iso;\r",
							"\r",
							"pm.test(\"Fecha de Ejecución: \" + fechaEjecucion)\r",
							"\r",
							"\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"let cuenta_corriente = jsonData['checking-accounts'];\r",
							"let cuenta_ahorro = jsonData['saving-accounts'];\r",
							"let credito_consumo = jsonData['personal-loans'];\r",
							"let deposito_plazo = jsonData['term-deposits'];\r",
							"let tarjeta_credito = jsonData['credit-cards'];\r",
							"\r",
							"//**** compare api -> osb ***/\r",
							"\r",
							"var compare_osb_cuenta_corriente = pm.collectionVariables.get('compare_osb_cuenta_corriente');\r",
							"console.log(\"compare_osb_cuenta_corriente: \", compare_osb_cuenta_corriente);\r",
							"\r",
							"var compare_osb_cuenta_ahorro = pm.collectionVariables.get('compare_osb_cuenta_ahorro');\r",
							"console.log(\"compare_osb_cuenta_ahorro: \", compare_osb_cuenta_ahorro);\r",
							"\r",
							"var compare_osb_creditoConsumo = pm.collectionVariables.get('compare_osb_creditoConsumo');\r",
							"console.log(\"compare_osb_creditoConsumo: \", compare_osb_creditoConsumo);\r",
							"\r",
							"var compare_osb_tc = pm.collectionVariables.get('compare_osb_tc');\r",
							"console.log(\"compare_osb_tc: \", compare_osb_tc);\r",
							"\r",
							"var compare_osb_inversion = pm.collectionVariables.get('compare_osb_inversion');\r",
							"console.log(\"compare_osb_inversion: 2\", compare_osb_inversion);\r",
							"\r",
							"\r",
							"//Cuenta corriente /checking-accounts\r",
							"if (compare_osb_cuenta_corriente.length >=0) {\r",
							" var x= false;\r",
							"    for (i = 0; i < compare_osb_cuenta_corriente.length; i++)\r",
							"    {       \r",
							"        x= false;\r",
							"        for (a = 0; a < cuenta_corriente.length; a++)\r",
							"         {          \r",
							"             x=compare_osb_cuenta_corriente[i]['cuentaCorriente']['identificadorProducto'] === cuenta_corriente[a].id &&\r",
							"             compare_osb_cuenta_corriente[i]['cuentaCorriente']['codigoSubProducto']===cuenta_corriente[a].productSubtype && \r",
							"             compare_osb_cuenta_corriente[i]['cuentaCorriente']['codigoProducto']===cuenta_corriente[a].productType &&\r",
							"             compare_osb_cuenta_corriente[i]['situacion']['glosa']===cuenta_corriente[a].status.description&&\r",
							"             compare_osb_cuenta_corriente[i]['situacion']['estado']===cuenta_corriente[a].status.state &&\r",
							"             compare_osb_cuenta_corriente[i]['situacion']['codigo']===cuenta_corriente[a].status.id &&\r",
							"             compare_osb_cuenta_corriente[i]['saldo']['saldoDisponible']===cuenta_corriente[a].balance.available.toString()&&\r",
							"             compare_osb_cuenta_corriente[i]['saldo']['totalDisponible']===cuenta_corriente[a].balance.total.toString()&&\r",
							"             parseFloat(compare_osb_cuenta_corriente[i]['lineaCredito']['cupo']['cupoDisponible'])===cuenta_corriente[a].facility.available&&\r",
							"             parseFloat(compare_osb_cuenta_corriente[i]['lineaCredito']['cupo']['cupoTotal'])===cuenta_corriente[a].facility.total&&\r",
							"             parseFloat(compare_osb_cuenta_corriente[i]['lineaCredito']['cupo']['cupoUtilizado'])===cuenta_corriente[a].facility.used\r",
							"             if(x===true){            \r",
							"                 break\r",
							"                 }\r",
							"        }        \r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Cuenta Corriente Invalida: ${ compare_osb_cuenta_corriente[i]['cuentaCorriente']['identificadorProducto']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            Comparar_Api_Osb(compare_osb_cuenta_corriente[i]['cuentaCorriente']['identificadorProducto'],cuenta_corriente[a].id,\"Cuenta Corriente Validad:\")\r",
							"        }\r",
							"    }       \r",
							"}\r",
							"else{\r",
							"     if(compare_osb_cuenta_corriente.length !== 0) {\r",
							"      x=compare_osb_cuenta_corriente['cuentaCorriente']['identificadorProducto'] === cuenta_corriente[0].id &&\r",
							"             compare_osb_cuenta_corriente['cuentaCorriente']['codigoSubProducto']===cuenta_corriente[0].productSubtype && \r",
							"             compare_osb_cuenta_corriente['cuentaCorriente']['codigoProducto']===cuenta_corriente[0].productType &&\r",
							"             compare_osb_cuenta_corriente['situacion']['glosa']===cuenta_corriente[0].status.description&&\r",
							"             compare_osb_cuenta_corriente['situacion']['estado']===cuenta_corriente[0].status.state &&\r",
							"             compare_osb_cuenta_corriente['situacion']['codigo']===cuenta_corriente[0].status.id&&\r",
							"             compare_osb_cuenta_corriente['saldo']['saldoDisponible']===cuenta_corriente[0].balance.available.toString()&&\r",
							"             compare_osb_cuenta_corriente['saldo']['totalDisponible']===cuenta_corriente[0].balance.total.toString()&&\r",
							"             parseFloat(compare_osb_cuenta_corriente['lineaCredito']['cupo']['cupoDisponible'])===cuenta_corriente[0].facility.available&&\r",
							"             parseFloat(compare_osb_cuenta_corriente['lineaCredito']['cupo']['cupoTotal'])===cuenta_corriente[0].facility.total&&\r",
							"             parseFloat(compare_osb_cuenta_corriente['lineaCredito']['cupo']['cupoUtilizado'])===cuenta_corriente[0].facility.used  \r",
							"             \r",
							"             console.log(compare_osb_cuenta_corriente['saldo']['totalDisponible']+\"=*\"+cuenta_corriente[0].balance.total)\r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Cuenta Corriente Invalida: ${ compare_osb_cuenta_corriente['cuentaCorriente']['identificadorProducto']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"\r",
							"            Comparar_Api_Osb(compare_osb_cuenta_corriente['cuentaCorriente']['identificadorProducto'],cuenta_corriente[0].id,\"Cuenta Corriente Validad:\")\r",
							"        }\r",
							"     }\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"//Cuenta de Ahorro/saving-accounts\r",
							"if (compare_osb_cuenta_ahorro .length >=0) {\r",
							" var x= false;   \r",
							"    for (i = 0; i < compare_osb_cuenta_ahorro.length; i++)\r",
							"    {  \r",
							"       \r",
							"        x= false;\r",
							"        for (a = 0; a < cuenta_ahorro.length; a++)\r",
							"         {\r",
							"             x=compare_osb_cuenta_ahorro[i]['cuentaAhorro']['identificadorProducto'] === cuenta_ahorro[a].id &&\r",
							"             compare_osb_cuenta_ahorro[i]['cuentaAhorro']['codigoSubProducto']===cuenta_ahorro[a].productSubtype &&\r",
							"             compare_osb_cuenta_ahorro[i]['cuentaAhorro']['codigoProducto']==cuenta_ahorro[a].productType&&\r",
							"             compare_osb_cuenta_ahorro[i]['situacion']['glosa']===cuenta_ahorro[a].status.description&&\r",
							"             compare_osb_cuenta_ahorro[i]['situacion']['estado']===cuenta_ahorro[a].status.state &&\r",
							"             compare_osb_cuenta_ahorro[i]['situacion']['codigo']===cuenta_ahorro[a].status.id &&\r",
							"             compare_osb_cuenta_ahorro[i]['saldo']['saldoDisponible']===cuenta_ahorro[a].balance.available.toString() &&\r",
							"             compare_osb_cuenta_ahorro[i]['saldo']['totalDisponible']===cuenta_ahorro[a].balance.total.toString() && \r",
							"             compare_osb_cuenta_ahorro[i]['moneda']['codigoMoneda']===cuenta_ahorro[a].currency.id   \r",
							"                   \r",
							"             if(x===true){            \r",
							"                 break\r",
							"                 }\r",
							"        }        \r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Cuenta Ahorro Invalida: ${ compare_osb_cuenta_ahorro[i]['cuentaAhorro']['identificadorProducto']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            Comparar_Api_Osb(compare_osb_cuenta_ahorro[i]['cuentaAhorro']['identificadorProducto'],cuenta_ahorro[a].id,\"Cuenta Ahorro Validad:\")\r",
							"        }\r",
							"    }       \r",
							"}\r",
							"else\r",
							"{\r",
							"     if(compare_osb_cuenta_ahorro.length !== 0) {\r",
							"            x=compare_osb_cuenta_ahorro['cuentaAhorro']['identificadorProducto'] === cuenta_ahorro[0].id &&\r",
							"             compare_osb_cuenta_ahorro['cuentaAhorro']['codigoSubProducto']===cuenta_ahorro[0].productSubtype &&\r",
							"             compare_osb_cuenta_ahorro['cuentaAhorro']['codigoProducto']==cuenta_ahorro[0].productType &&\r",
							"             compare_osb_cuenta_ahorro['situacion']['glosa']===cuenta_ahorro[0].status.description&&\r",
							"             compare_osb_cuenta_ahorro['situacion']['estado']===cuenta_ahorro[0].status.state &&\r",
							"             compare_osb_cuenta_ahorro['situacion']['codigo']===cuenta_ahorro[0].status.id &&\r",
							"             compare_osb_cuenta_ahorro['saldo']['saldoDisponible']===cuenta_ahorro[0].balance.available.toString() &&\r",
							"             compare_osb_cuenta_ahorro['saldo']['totalDisponible']===cuenta_ahorro[0].balance.total.toString() && \r",
							"             compare_osb_cuenta_ahorro['moneda']['codigoMoneda']===cuenta_ahorro[0].currency.id          \r",
							"                  \r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Cuenta Ahorro Invalida: ${ compare_osb_cuenta_ahorro['cuentaAhorro']['identificadorProducto']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            Comparar_Api_Osb(compare_osb_cuenta_ahorro['cuentaAhorro']['identificadorProducto'],cuenta_ahorro[0].id,\"Cuenta Ahorro Validad:\")\r",
							"        }\r",
							"     }\r",
							"}\r",
							"\r",
							"//Créditto de Consumo /personal-loan\r",
							"if (compare_osb_creditoConsumo.length >=0) {\r",
							" var x= false;\r",
							"    for (i = 0; i < compare_osb_creditoConsumo.length; i++)\r",
							"    {  \r",
							"        x= false;\r",
							"        for (a = 0; a < credito_consumo.length; a++)\r",
							"         {    \r",
							"             x=compare_osb_creditoConsumo[i]['creditoConsumo']['identificadorProducto'] === credito_consumo[a].id &&\r",
							"             compare_osb_creditoConsumo[i]['creditoConsumo']['codigoSubProducto']===credito_consumo[a].productSubtype &&\r",
							"             compare_osb_creditoConsumo[i]['creditoConsumo']['codigoProducto']==credito_consumo[a].productType &&\r",
							"             compare_osb_creditoConsumo[i]['situacion']['glosa']===credito_consumo[a].status.description&&\r",
							"             compare_osb_creditoConsumo[i]['situacion']['estado']===credito_consumo[a].status.state &&\r",
							"             compare_osb_creditoConsumo[i]['situacion']['codigo']===credito_consumo[a].status.id &&\r",
							"             compare_osb_creditoConsumo[i]['montoCredito']['montoSolicitado']===credito_consumo[a].loanAmount.netAmount.toString() &&\r",
							"             compare_osb_creditoConsumo[i]['cuota']['numeroCuotasPagadas']===credito_consumo[a].installments.paidInstallments.toString()&&\r",
							"             //compare_osb_creditoConsumo[i]['cuota']['totalCuota']===credito_consumo[a].installments.installmentNumber.toString()&&\r",
							"             compare_osb_creditoConsumo[i]['moneda']['codigoMoneda']==credito_consumo[a].currency.id&&\r",
							"            compare_osb_creditoConsumo[i]['moneda']['moneda']==credito_consumo[a].currency.code\r",
							"             if(x===true){            \r",
							"                 break\r",
							"                 }\r",
							"        }        \r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Credito Consumo Invalida: ${ compare_osb_creditoConsumo[i]['creditoConsumo']['identificadorProducto']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            Comparar_Api_Osb(compare_osb_creditoConsumo[i]['creditoConsumo']['identificadorProducto'],credito_consumo[a].id,\"Credito Consumo Validad:\")\r",
							"        }\r",
							"    }       \r",
							"}\r",
							"else\r",
							"{\r",
							"     if(compare_osb_creditoConsumo.length !== 0) {\r",
							"      x=compare_osb_creditoConsumo['creditoConsumo']['identificadorProducto'] === credito_consumo[0].id &&\r",
							"             compare_osb_creditoConsumo['creditoConsumo']['codigoSubProducto']===credito_consumo[0].productSubtype &&\r",
							"             compare_osb_creditoConsumo['creditoConsumo']['codigoProducto']==credito_consumo[0].productType &&\r",
							"             compare_osb_creditoConsumo['situacion']['glosa']===credito_consumo[0].status.description&&\r",
							"             compare_osb_creditoConsumo['situacion']['estado']===credito_consumo[0].status.state &&\r",
							"             compare_osb_creditoConsumo['situacion']['codigo']===credito_consumo[0].status.id &&\r",
							"             compare_osb_creditoConsumo['montoCredito']['montoSolicitado']===credito_consumo[0].loanAmount.netAmount.toString() &&\r",
							"             compare_osb_creditoConsumo['cuota']['numeroCuotasPagadas']===credito_consumo[0].installments.paidInstallments.toString()&&\r",
							"             //compare_osb_creditoConsumo['cuota']['totalCuota']===credito_consumo[0].installments.installmentNumber.toString()&&\r",
							"             compare_osb_creditoConsumo['moneda']['codigoMoneda']==credito_consumo[0].currency.id&&\r",
							"            compare_osb_creditoConsumo['moneda']['moneda']==credito_consumo[0].currency.code\r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Credito Consumo Invalida: ${ compare_osb_creditoConsumo['creditoConsumo']['identificadorProducto']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            Comparar_Api_Osb(compare_osb_creditoConsumo['creditoConsumo']['identificadorProducto'],credito_consumo[0].id,\"Credito Consumo Validad:\")\r",
							"        }\r",
							"     }\r",
							"}\r",
							"\r",
							"//Tarjeta de credito/credit-cards\r",
							"var tarjeta_credito_facility_cupoNacional_id = \"0001\"\r",
							"var tarjeta_credito_facility_avance_id = \"0002\"\r",
							"if (compare_osb_tc.length >0) {\r",
							" var x= false;\r",
							"    for (i = 0; i < compare_osb_tc.length; i++)\r",
							"    {  \r",
							"        x= false;\r",
							"        for (a = 0; a < tarjeta_credito.length; a++)\r",
							"         {    \r",
							"\r",
							"            x=compare_osb_tc[i]['cuentaTarjetaCredito']['identificador'] === tarjeta_credito[a].id &&   \r",
							"            compare_osb_tc[i]['tarjetaCredito']['codigoSubProducto']===tarjeta_credito[a].productSubtype &&\r",
							"            compare_osb_tc[i]['tarjetaCredito']['codigoProducto']==tarjeta_credito[a].productType&&\r",
							"             compare_osb_tc[i]['situacion']['estado']===tarjeta_credito[a].card.status.state &&\r",
							"             compare_osb_tc[i]['situacion']['codigo']===tarjeta_credito[a].card.status.id &&\r",
							"             compare_osb_tc[i]['situacion']['glosa']===tarjeta_credito[a].card.status.description &&\r",
							"             compare_osb_tc[i]['tarjetaCredito']['identificadorProducto']===tarjeta_credito[a].card.PAN.toString() &&\r",
							"             //compare_osb_tc[i]['plastico']['titularidad']===tarjeta_credito[0].card.ownership.code/*&&\r",
							"             compare_osb_tc[i]['resumenProximaFacturacion']['fechaProximoVencimiento']===tarjeta_credito[a].nextBillingSummaryType.nextExpirationDate&&        \r",
							"             compare_osb_tc[i]['plastico']['situacion']['estado']===tarjeta_credito[a].card.subStatus.currentStatus.id &&\r",
							"             compare_osb_tc[i]['plastico']['situacion']['glosa']===tarjeta_credito[a].card.subStatus.currentStatus.description&&\r",
							"            \r",
							"            compare_osb_tc[i]['contrato']['situacion']['codigo']===tarjeta_credito[a].status.state &&\r",
							"             compare_osb_tc[i]['contrato']['situacion']['glosa']===tarjeta_credito[a].status.description\r",
							"\r",
							"\r",
							"            \r",
							"        if (tarjeta_credito[a].facility[0].id === tarjeta_credito_facility_cupoNacional_id && x===true) {\r",
							"\r",
							"            x=compare_osb_tc[i]['cupoNacional']['cupoDisponible'].includes(tarjeta_credito[a].facility[0].balance.available) &&\r",
							"            compare_osb_tc[i]['cupoNacional']['cupoTotal'].includes(tarjeta_credito[a].facility[0].balance.total.toString())&&\r",
							"            compare_osb_tc[i]['cupoNacional']['cupoUtilizado'].includes(tarjeta_credito[a].facility[0].balance.used.toString()) &&\r",
							"           //compare_osb_tc[i]['cupoNacional']['cupoUtilizadoDiario'].includes(tarjeta_credito[a].facility[0].balance.dailyused.toString()) &&\r",
							"            compare_osb_tc[i]['moneda']['codigoMoneda']===tarjeta_credito[a].facility[0].currency.id     \r",
							"            \r",
							"        }\r",
							"        if (tarjeta_credito[a].facility[1].id === tarjeta_credito_facility_avance_id&& x===true) { \r",
							"            x=compare_osb_tc[i]['avance']['cupoDisponible'].includes(tarjeta_credito[a].facility[1].balance.available)&&\r",
							"            compare_osb_tc[i]['avance']['cupoTotal'].includes(tarjeta_credito[a].facility[1].balance.total)&&\r",
							"            compare_osb_tc[i]['avance']['cupoUtilizado'].includes(tarjeta_credito[a].facility[1].balance.used.toString()) &&\r",
							"           // compare_osb_tc[i]['avance']['cupoUtilizadoDiario'].includes(tarjeta_credito[a].facility[1].balance.dailyused) &&\r",
							"            compare_osb_tc[i]['moneda']['codigoMoneda']===tarjeta_credito[a].facility[1].currency.id \r",
							"        }\r",
							"             if(x===true){            \r",
							"                 break\r",
							"                 }\r",
							"        }        \r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Tarjeta de credito Invalida: ${ compare_osb_tc[i]['cuentaTarjetaCredito']['identificador']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            \r",
							"            Comparar_Api_Osb(compare_osb_tc[i]['cuentaTarjetaCredito']['identificador'],tarjeta_credito[a].id,\"Tarjeta de credito Validad:\")\r",
							"        }\r",
							"    }       \r",
							"}\r",
							"else\r",
							"{\r",
							"    if(compare_osb_tc.length !== 0){\r",
							"      x=compare_osb_tc['cuentaTarjetaCredito']['identificador'] === tarjeta_credito[0].id &&\r",
							"             compare_osb_tc['tarjetaCredito']['codigoSubProducto']===tarjeta_credito[0].productSubtype &&\r",
							"            compare_osb_tc['tarjetaCredito']['codigoProducto']==tarjeta_credito[0].productType&&\r",
							"             compare_osb_tc['situacion']['estado']===tarjeta_credito[0].card.status.state &&\r",
							"             compare_osb_tc['situacion']['codigo']===tarjeta_credito[0].card.status.id &&\r",
							"             compare_osb_tc['situacion']['glosa']===tarjeta_credito[0].card.status.description &&\r",
							"             compare_osb_tc['tarjetaCredito']['identificadorProducto']===tarjeta_credito[0].card.PAN.toString() &&\r",
							"             //compare_osb_tc['plastico']['titularidad']===tarjeta_credito[0].card.ownership.code/*&&\r",
							"             compare_osb_tc['resumenProximaFacturacion']['fechaProximoVencimiento']===tarjeta_credito[0].nextBillingSummaryType.nextExpirationDate&&        \r",
							"             compare_osb_tc['plastico']['situacion']['estado']===tarjeta_credito[0].card.subStatus.currentStatus.id &&\r",
							"             compare_osb_tc['plastico']['situacion']['glosa']===tarjeta_credito[0].card.subStatus.currentStatus.description&&\r",
							"            \r",
							"            compare_osb_tc['contrato']['situacion']['codigo']===tarjeta_credito[0].status.state &&\r",
							"             compare_osb_tc['contrato']['situacion']['glosa']===tarjeta_credito[0].status.description\r",
							"            \r",
							"        if (tarjeta_credito[0].facility[0].id === tarjeta_credito_facility_cupoNacional_id && x===true) {\r",
							"            x=compare_osb_tc['cupoNacional']['cupoDisponible'].includes(tarjeta_credito[0].facility[0].balance.available) &&\r",
							"            compare_osb_tc['cupoNacional']['cupoTotal'].includes(tarjeta_credito[0].facility[0].balance.total.toString())&&\r",
							"            compare_osb_tc['cupoNacional']['cupoUtilizado'].includes(tarjeta_credito[0].facility[0].balance.used.toString()) &&\r",
							"           //compare_osb_tc['cupoNacional']['cupoUtilizadoDiario'].includes(tarjeta_credito[0].facility[0].balance.dailyused.toString()) &&\r",
							"            compare_osb_tc['moneda']['codigoMoneda']===tarjeta_credito[0].facility[0].currency.id\r",
							"        }\r",
							"        \r",
							"        if (tarjeta_credito[0].facility[1].id == tarjeta_credito_facility_avance_id&& x===true) {\r",
							"            \r",
							"            x=compare_osb_tc['avance']['cupoDisponible'].includes(tarjeta_credito[0].facility[1].balance.available)&&\r",
							"            compare_osb_tc['avance']['cupoTotal'].includes(tarjeta_credito[0].facility[1].balance.total)&&\r",
							"            compare_osb_tc['avance']['cupoUtilizado'].includes(tarjeta_credito[0].facility[1].balance.used.toString()) &&\r",
							"            //compare_osb_tc['avance']['cupoUtilizadoDiario'].includes(tarjeta_credito[0].facility[1].balance.dailyused) &&\r",
							"            compare_osb_tc['moneda']['codigoMoneda']===tarjeta_credito[0].facility[1].currency.id \r",
							"        }\r",
							"        \r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Tarjeta Credito Invalida: ${ compare_osb_tc['cuentaTarjetaCredito']['identificador']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            Comparar_Api_Osb(compare_osb_tc['cuentaTarjetaCredito']['identificador'],tarjeta_credito[0].id,\"Tarjeta Credito Validad:\")\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"//Deposito a plazo/term-deposits\r",
							"//10058907 muchos\r",
							"//16459620 uno\r",
							"//1053765335 muchisimoss\r",
							"if (compare_osb_inversion.length >=0) {\r",
							" var x= false;\r",
							"    for (i = 0; i < compare_osb_inversion.length; i++)\r",
							"    {       \r",
							"        x= false;\r",
							"        for (a = 0; a < deposito_plazo.length; a++)\r",
							"         {     \r",
							"             \r",
							"             x=compare_osb_inversion[i]['depositoPlazo']['identificadorProducto'] === deposito_plazo[a].id &&\r",
							"             compare_osb_inversion[i]['depositoPlazo']['codigoSubProducto']===deposito_plazo[a].productSubtype &&\r",
							"             compare_osb_inversion[i]['depositoPlazo']['codigoProducto']==deposito_plazo[a].productType &&\r",
							"             compare_osb_inversion[i]['situacion']['glosa']===deposito_plazo[a].status.description&&\r",
							"             compare_osb_inversion[i]['situacion']['estado']===deposito_plazo[a].status.state &&\r",
							"             compare_osb_inversion[i]['situacion']['codigo']===deposito_plazo[a].status.id &&       \r",
							"             compare_osb_inversion[i]['montoInvertido']===deposito_plazo[a].balance.amountInvested.toString()&&\r",
							"             compare_osb_inversion[i]['fechaInversion']===deposito_plazo[a].termDepositDetails.creationDate.toString()&&\r",
							"             compare_osb_inversion[i]['fechaVencimiento']===deposito_plazo[a].termDepositDetails.expirationDate.toString()&&\r",
							"             Math.ceil(compare_osb_inversion[i]['valorRescate'])===Math.ceil(deposito_plazo[a].balance.total.toString())&&\r",
							"             compare_osb_inversion[i]['moneda']['codigoMoneda']===deposito_plazo[a].currency.id\r",
							"/*\r",
							"//Anteriormente venia con un [_] para poder acceder al valor\r",
							"            compare_osb_inversion[i]['montoInvertido']['_']===deposito_plazo[a].balance.amountInvested.toString()&&\r",
							"             compare_osb_inversion[i]['fechaInversion']['_']===deposito_plazo[a].termDepositDetails.creationDate.toString()&&\r",
							"             compare_osb_inversion[i]['fechaVencimiento']['_']===deposito_plazo[a].termDepositDetails.expirationDate.toString()&&\r",
							"             Math.ceil(compare_osb_inversion[i]['valorRescate']['_'])===Math.ceil(deposito_plazo[a].balance.total.toString())&&\r",
							"             compare_osb_inversion[i]['moneda']['codigoMoneda']===deposito_plazo[a].currency.id\r",
							"*/\r",
							"             \r",
							"            if(compare_osb_inversion[i]['puedeCobrar']!=undefined && x==true) \r",
							"            {\r",
							"                //x=compare_osb_inversion[i]['puedeCobrar']['_']===deposito_plazo[a].termDepositDetails.availableToCollect.toString()&&\r",
							"                //compare_osb_inversion[i]['esRenovacion']['_']===deposito_plazo[a].termDepositDetails.automaticRenewal.toString()\r",
							"\r",
							"                 x=compare_osb_inversion[i]['puedeCobrar']===deposito_plazo[a].termDepositDetails.availableToCollect.toString()&&\r",
							"                compare_osb_inversion[i]['esRenovacion']===deposito_plazo[a].termDepositDetails.automaticRenewal.toString()\r",
							"            }\r",
							"             if(x===true){            \r",
							"                 break\r",
							"                 }\r",
							"        }        \r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Deposito a plazo Invalida: ${ compare_osb_inversion[i]['depositoPlazo']['identificadorProducto']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            Comparar_Api_Osb(compare_osb_inversion[i]['depositoPlazo']['identificadorProducto'],deposito_plazo[a].id,\"Deposito a plazo Validad:\")\r",
							"        }\r",
							"    }       \r",
							"}\r",
							"else\r",
							"{   \r",
							"    if(compare_osb_inversion.length !== 0)  \r",
							"    {      \r",
							"             x=compare_osb_inversion['depositoPlazo']['identificadorProducto'] === deposito_plazo[0].id &&\r",
							"             compare_osb_inversion['depositoPlazo']['codigoSubProducto']===deposito_plazo[0].productSubtype &&\r",
							"             compare_osb_inversion['depositoPlazo']['codigoProducto']==deposito_plazo[0].productType &&\r",
							"             compare_osb_inversion['situacion']['glosa']===deposito_plazo[0].status.description&&\r",
							"             compare_osb_inversion['situacion']['estado']===deposito_plazo[0].status.state &&\r",
							"             compare_osb_inversion['situacion']['codigo']===deposito_plazo[0].status.id &&             \r",
							"             compare_osb_inversion['montoInvertido']===deposito_plazo[0].balance.amountInvested.toString()&&\r",
							"             compare_osb_inversion['fechaInversion']===deposito_plazo[0].termDepositDetails.creationDate.toString()&&\r",
							"             compare_osb_inversion['fechaVencimiento']===deposito_plazo[0].termDepositDetails.expirationDate.toString()&&\r",
							"             Math.ceil(compare_osb_inversion['valorRescate'])===Math.ceil(deposito_plazo[0].balance.total.toString())&&\r",
							"             compare_osb_inversion['moneda']['codigoMoneda']===deposito_plazo[0].currency.id&&         \r",
							"             compare_osb_inversion['montoInvertido']===deposito_plazo[0].balance.amountInvested.toString()&&\r",
							"             compare_osb_inversion['fechaInversion']===deposito_plazo[0].termDepositDetails.creationDate.toString()&&\r",
							"             compare_osb_inversion['fechaVencimiento']===deposito_plazo[0].termDepositDetails.expirationDate.toString()&&\r",
							"             Math.ceil(compare_osb_inversion['valorRescate'])===Math.ceil(deposito_plazo[0].balance.total.toString())&&\r",
							"             compare_osb_inversion['moneda']['codigoMoneda']===deposito_plazo[0].currency.id          \r",
							"        \t/*\r",
							"             compare_osb_inversion['montoInvertido']['_']===deposito_plazo[0].balance.amountInvested.toString()&&\r",
							"             compare_osb_inversion['fechaInversion']['_']===deposito_plazo[0].termDepositDetails.creationDate.toString()&&\r",
							"             compare_osb_inversion['fechaVencimiento']['_']===deposito_plazo[0].termDepositDetails.expirationDate.toString()&&\r",
							"             Math.ceil(compare_osb_inversion['valorRescate']['_'])===Math.ceil(deposito_plazo[0].balance.total.toString())&&\r",
							"             compare_osb_inversion['moneda']['codigoMoneda']===deposito_plazo[0].currency.id   \r",
							"*/\r",
							"             //console.log(Math.ceil(compare_osb_inversion['valorRescate'])+\"===\"+Math.ceil(deposito_plazo[0].balance.total.toString()))      \r",
							"             if(compare_osb_inversion['puedeCobrar']!=undefined && x==true) \r",
							"            {\r",
							"                //x=compare_osb_inversion['puedeCobrar']['_']===deposito_plazo[0].termDepositDetails.availableToCollect.toString()&&\r",
							"                //compare_osb_inversion['esRenovacion']['_']===deposito_plazo[0].termDepositDetails.automaticRenewal.toString()\r",
							"                \r",
							"                x=compare_osb_inversion['puedeCobrar']===deposito_plazo[0].termDepositDetails.availableToCollect.toString()&&\r",
							"                compare_osb_inversion['esRenovacion']===deposito_plazo[0].termDepositDetails.automaticRenewal.toString()\r",
							"            }\r",
							"    \r",
							"        if(x===false)\r",
							"        {       \r",
							"            pm.test(`Deposito a plazo Invalida: ${ compare_osb_inversion['depositoPlazo']['identificadorProducto']}`, function(){\r",
							"                pm.expect(x).is.to.eql(true)\r",
							"            })\r",
							"        }\r",
							"        else{\r",
							"            Comparar_Api_Osb(compare_osb_inversion['depositoPlazo']['identificadorProducto'],deposito_plazo[0].id,\"Deposito a plazo Validad:\")\r",
							"        }\r",
							"    }\r",
							"    \r",
							"}\r",
							"\r",
							"  //Comparar_Api_Osb(\"12\",\"12\",\"Cuenta corriente\")\r",
							"function Comparar_Api_Osb (Osb_valor, Api_valor,producto) {     \r",
							"\r",
							"         console.log(Osb_valor,\" = \",Api_valor)\r",
							"        pm.test(`${ producto} ${ Api_valor}`, function () {\r",
							"            pm.expect(Osb_valor).to.be.eql(Api_valor)\r",
							"        })\r",
							"     }\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Hacemos una comprobación por si tenemos un JSON cargado\r",
							"//var c_username = pm.iterationData.get(\"c_username\");\r",
							"//pm.variables.set(\"c_username\", \"16459620\");\r",
							"//10058907\"\r",
							"//var username = pm.variables.get(\"c_username\");\r",
							"//var c_username = pm.iterationData.get(\"c_username\");\r",
							"\r",
							"//var c_username = pm.iterationData.get(\"c_username\");\r",
							"//pm.variables.set(\"c_username\", \"c_username\");\r",
							"var username = pm.variables.get(\"c_username\");\r",
							"//Incluimos librería Crypto - Usamos métodos para convertir un string a sha256\r",
							"var CryptoJS = require(\"crypto-js\")\r",
							"\r",
							"//Recuperamos el valor de access_token\r",
							"var access_token = pm.collectionVariables.get(\"c_accesstoken_token\");\r",
							"console.log(\"access_token\", access_token);\r",
							"console.log(\"username\", username);\r",
							"\r",
							"var rawStr = CryptoJS.enc.Utf8.parse(username + access_token);\r",
							"console.log(\"rawStr\", rawStr);\r",
							"\r",
							"var sha256 = CryptoJS.SHA256(rawStr).toString()\r",
							"console.log(\"sha256\", sha256);\r",
							"\r",
							"pm.collectionVariables.set(\"c_secretUser\", sha256);\r",
							"\r",
							"//Decrypt\r",
							"//const plainText = CryptoJS.AES.decrypt(encryptedText, 'secret').toString(CryptoJS.enc.Utf8)"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{c_accesstoken_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Channel",
						"value": "Web"
					},
					{
						"key": "X-Country",
						"value": "CL"
					},
					{
						"key": "X-Commerce",
						"value": "BANCO"
					},
					{
						"key": "X-Customer-Id",
						"value": "{{c_username}}"
					},
					{
						"key": "X-Trace-Id",
						"value": "pruebaGrafana",
						"type": "text",
						"disabled": true
					},
					{
						"key": "X-Facility-Id",
						"value": "12345",
						"disabled": true
					},
					{
						"key": "X-Document-Id",
						"value": "{{c_Document_Id}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://integracion-k8s-qa.fif.tech/fifco/v1/customers/1/product-overview?status=01&status=02&status=03&status=04&status=00",
					"protocol": "https",
					"host": [
						"integracion-k8s-qa",
						"fif",
						"tech"
					],
					"path": [
						"fifco",
						"v1",
						"customers",
						"1",
						"product-overview"
					],
					"query": [
						{
							"key": "productType",
							"value": "CREDIT-CARDS",
							"disabled": true
						},
						{
							"key": "productType",
							"value": "ACCOUNTS",
							"disabled": true
						},
						{
							"key": "productType",
							"value": "PERSONAL-LOANS",
							"disabled": true
						},
						{
							"key": "productType",
							"value": "INVESTMENTS",
							"disabled": true
						},
						{
							"key": "productType",
							"value": "MORTGAGE-LOANS",
							"disabled": true
						},
						{
							"key": "productType",
							"value": "ALL",
							"disabled": true
						},
						{
							"key": "status",
							"value": "01"
						},
						{
							"key": "status",
							"value": "02"
						},
						{
							"key": "status",
							"value": "03"
						},
						{
							"key": "status",
							"value": "04"
						},
						{
							"key": "status",
							"value": "00"
						}
					]
				},
				"description": "Verificar ejecución API Consolidada al obtener Depósito a Plazo (termDeposit)\n\nPrecondiciones: \nDato de prueba/Cliente: Titular, estado: Activo\nCliente debe poseer Depósito a Plazo con estado 00\n\nParámetros de entrada:\nRUT+DV: RUT sin punto ni guión"
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "c_xapikey_token",
			"value": ""
		},
		{
			"key": "c_authorization_token",
			"value": ""
		},
		{
			"key": "c_accesstoken_token",
			"value": ""
		},
		{
			"key": "c_secretUser",
			"value": ""
		},
		{
			"key": "e_api_url_cl\n",
			"value": "https://integracion-bfcl-qa.fif.tech"
		},
		{
			"key": "c_credit_card_id",
			"value": ""
		},
		{
			"key": "c_channel",
			"value": ""
		},
		{
			"key": "c_country",
			"value": "",
			"type": "string"
		},
		{
			"key": "c_commerce",
			"value": "",
			"type": "string"
		},
		{
			"key": "c_username",
			"value": "",
			"type": "string"
		},
		{
			"key": "c_productType",
			"value": "",
			"type": "string"
		},
		{
			"key": "c_response_consolidada",
			"value": "",
			"type": "string"
		},
		{
			"key": "c_response_consolidada_2",
			"value": ""
		},
		{
			"key": "compare_osb_cuenta_corriente",
			"value": ""
		},
		{
			"key": "compare_osb_cuenta_vista",
			"value": ""
		},
		{
			"key": "compare_osb_cuenta_ahorro",
			"value": ""
		},
		{
			"key": "compare_osb_lineaCredito",
			"value": ""
		},
		{
			"key": "compare_osb_creditoConsumo",
			"value": ""
		},
		{
			"key": "compare_osb_creditoHipotecario",
			"value": ""
		},
		{
			"key": "compare_osb_tc",
			"value": ""
		},
		{
			"key": "compare_osb_inversion",
			"value": ""
		},
		{
			"key": "c_response_consolidada_02",
			"value": ""
		},
		{
			"key": "c_date_iso",
			"value": ""
		},
		{
			"key": "c_Document_Id",
			"value": "",
			"type": "string"
		}
	]
}